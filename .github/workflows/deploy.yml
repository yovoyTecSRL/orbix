name: 🚀 Deploy Orbix AI to Hetzner

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: 📦 Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image
      run: |
        echo "🔨 Building Orbix AI Docker image..."
        docker build -t orbix-ai:latest .
        docker save orbix-ai:latest | gzip > orbix-ai.tar.gz
        
    - name: 📤 Deploy to Hetzner Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HETZNER_IP }}
        username: root
        key: ${{ secrets.HETZNER_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          echo "🚀 Starting deployment process..."
          
          # Crear directorio si no existe
          mkdir -p /opt/orbix
          cd /opt/orbix
          
          # Backup de la versión anterior
          if [ -f docker-compose.yml ]; then
            echo "💾 Creating backup..."
            docker-compose down || true
            cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S) || true
          fi
          
          # Actualizar código desde GitHub
          if [ -d .git ]; then
            echo "🔄 Updating from GitHub..."
            git fetch origin
            git reset --hard origin/main
          else
            echo "📥 Cloning repository..."
            git clone https://github.com/yovoyTecSRL/orbix.git .
          fi
          
          # Asegurar permisos
          chmod +x *.sh || true
          
          # Detener contenedores anteriores
          echo "🛑 Stopping previous containers..."
          docker-compose down || true
          docker stop orbix-ai || true
          docker rm orbix-ai || true
          
          # Limpiar imágenes antiguas
          echo "🧹 Cleaning old images..."
          docker image prune -f || true
          
          # Construir y ejecutar
          echo "🏗️ Building and starting new containers..."
          docker-compose build --no-cache
          docker-compose up -d
          
          # Verificar estado
          echo "✅ Checking deployment status..."
          sleep 10
          docker-compose ps
          docker-compose logs --tail=20
          
          # Test de conectividad
          echo "🔍 Testing connectivity..."
          curl -f http://localhost/ || echo "⚠️ Warning: Service might still be starting..."
          
          echo "🎉 Deployment completed successfully!"
          
    - name: 🔔 Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful! 🎉"
        else
          echo "❌ Deployment failed! 😞"
        fi
